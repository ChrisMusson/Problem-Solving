'''
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal
and D = |Pk − Pj| is minimised; what is the value of D?
'''

# I am not happy with this solution as it assumes that the first instance found where both
# Pj + Pk and Pk - Pj are pentagonal will be the one that minimises the difference,
# when this isn't necessarily the case. I couldn't think of a good way to get around this


def pent(n):
    return n * (3 * n - 1) // 2


def main():
    pentagonals = set([pent(x) for x in range(1, 5000)])
    for j in range(1, 5000):
        for k in range(j, 5000):
            p_j = pent(j)
            p_k = pent(k)
            diff = p_k - p_j
            if p_j + p_k in pentagonals and diff in pentagonals:
                return diff


if __name__ == "__main__":
    print(main())

# Output: 5482660
